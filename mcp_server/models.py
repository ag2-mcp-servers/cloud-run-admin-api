# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:45:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudRunV2BinaryAuthorization(BaseModel):
    breakglassJustification: Optional[str] = Field(
        None,
        description='If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass',
    )
    useDefault: Optional[bool] = Field(
        None,
        description="If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.",
    )


class GoogleCloudRunV2CloudSqlInstance(BaseModel):
    instances: Optional[List[str]] = Field(
        None,
        description='The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}',
    )


class ExecutionReason(Enum):
    EXECUTION_REASON_UNDEFINED = 'EXECUTION_REASON_UNDEFINED'
    JOB_STATUS_SERVICE_POLLING_ERROR = 'JOB_STATUS_SERVICE_POLLING_ERROR'
    NON_ZERO_EXIT_CODE = 'NON_ZERO_EXIT_CODE'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'


class Reason(Enum):
    COMMON_REASON_UNDEFINED = 'COMMON_REASON_UNDEFINED'
    UNKNOWN = 'UNKNOWN'
    REVISION_FAILED = 'REVISION_FAILED'
    PROGRESS_DEADLINE_EXCEEDED = 'PROGRESS_DEADLINE_EXCEEDED'
    CONTAINER_MISSING = 'CONTAINER_MISSING'
    CONTAINER_PERMISSION_DENIED = 'CONTAINER_PERMISSION_DENIED'
    CONTAINER_IMAGE_UNAUTHORIZED = 'CONTAINER_IMAGE_UNAUTHORIZED'
    CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED = (
        'CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED'
    )
    ENCRYPTION_KEY_PERMISSION_DENIED = 'ENCRYPTION_KEY_PERMISSION_DENIED'
    ENCRYPTION_KEY_CHECK_FAILED = 'ENCRYPTION_KEY_CHECK_FAILED'
    SECRETS_ACCESS_CHECK_FAILED = 'SECRETS_ACCESS_CHECK_FAILED'
    WAITING_FOR_OPERATION = 'WAITING_FOR_OPERATION'
    IMMEDIATE_RETRY = 'IMMEDIATE_RETRY'
    POSTPONED_RETRY = 'POSTPONED_RETRY'
    INTERNAL = 'INTERNAL'


class RevisionReason(Enum):
    REVISION_REASON_UNDEFINED = 'REVISION_REASON_UNDEFINED'
    PENDING = 'PENDING'
    RESERVE = 'RESERVE'
    RETIRED = 'RETIRED'
    RETIRING = 'RETIRING'
    RECREATING = 'RECREATING'
    HEALTH_CHECK_CONTAINER_ERROR = 'HEALTH_CHECK_CONTAINER_ERROR'
    CUSTOMIZED_PATH_RESPONSE_PENDING = 'CUSTOMIZED_PATH_RESPONSE_PENDING'
    MIN_INSTANCES_NOT_PROVISIONED = 'MIN_INSTANCES_NOT_PROVISIONED'
    ACTIVE_REVISION_LIMIT_REACHED = 'ACTIVE_REVISION_LIMIT_REACHED'
    NO_DEPLOYMENT = 'NO_DEPLOYMENT'
    HEALTH_CHECK_SKIPPED = 'HEALTH_CHECK_SKIPPED'
    MIN_INSTANCES_WARMING = 'MIN_INSTANCES_WARMING'


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CONDITION_PENDING = 'CONDITION_PENDING'
    CONDITION_RECONCILING = 'CONDITION_RECONCILING'
    CONDITION_FAILED = 'CONDITION_FAILED'
    CONDITION_SUCCEEDED = 'CONDITION_SUCCEEDED'


class GoogleCloudRunV2Condition(BaseModel):
    executionReason: Optional[ExecutionReason] = Field(
        None, description='A reason for the execution condition.'
    )
    lastTransitionTime: Optional[str] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Human readable message indicating details about the current status.',
    )
    reason: Optional[Reason] = Field(
        None, description='A common (service-level) reason for this condition.'
    )
    revisionReason: Optional[RevisionReason] = Field(
        None, description='A reason for the revision condition.'
    )
    severity: Optional[Severity] = Field(
        None,
        description='How to interpret failures of this condition, one of Error, Warning, Info',
    )
    state: Optional[State] = Field(None, description='State of the condition.')
    type: Optional[str] = Field(
        None,
        description='type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.',
    )


class GoogleCloudRunV2ContainerPort(BaseModel):
    containerPort: Optional[int] = Field(
        None,
        description='Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".',
    )


class LaunchStage(Enum):
    LAUNCH_STAGE_UNSPECIFIED = 'LAUNCH_STAGE_UNSPECIFIED'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    PRELAUNCH = 'PRELAUNCH'
    EARLY_ACCESS = 'EARLY_ACCESS'
    ALPHA = 'ALPHA'
    BETA = 'BETA'
    GA = 'GA'
    DEPRECATED = 'DEPRECATED'


class GoogleCloudRunV2ExecutionReference(BaseModel):
    completionTime: Optional[str] = Field(
        None, description='Creation timestamp of the execution.'
    )
    createTime: Optional[str] = Field(
        None, description='Creation timestamp of the execution.'
    )
    name: Optional[str] = Field(None, description='Name of the execution.')


class GoogleCloudRunV2GRPCAction(BaseModel):
    port: Optional[int] = Field(
        None,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.',
    )


class GoogleCloudRunV2HTTPHeader(BaseModel):
    name: Optional[str] = Field(None, description='Required. The header field name')
    value: Optional[str] = Field(None, description='The header field value')


class GoogleCloudRunV2ResourceRequirements(BaseModel):
    cpuIdle: Optional[bool] = Field(
        None,
        description='Determines whether CPU should be throttled or not outside of requests.',
    )
    limits: Optional[Dict[str, str]] = Field(
        None,
        description="Only ´memory´ and 'cpu' are supported. Notes: * The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. For more information, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits",
    )
    startupCpuBoost: Optional[bool] = Field(
        None,
        description='Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.',
    )


class EncryptionKeyRevocationAction(Enum):
    ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED = (
        'ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED'
    )
    PREVENT_NEW = 'PREVENT_NEW'
    SHUTDOWN = 'SHUTDOWN'


class ExecutionEnvironment(Enum):
    EXECUTION_ENVIRONMENT_UNSPECIFIED = 'EXECUTION_ENVIRONMENT_UNSPECIFIED'
    EXECUTION_ENVIRONMENT_GEN1 = 'EXECUTION_ENVIRONMENT_GEN1'
    EXECUTION_ENVIRONMENT_GEN2 = 'EXECUTION_ENVIRONMENT_GEN2'


class GoogleCloudRunV2RevisionScaling(BaseModel):
    maxInstanceCount: Optional[int] = Field(
        None,
        description='Maximum number of serving instances that this resource should have.',
    )
    minInstanceCount: Optional[int] = Field(
        None,
        description='Minimum number of serving instances that this resource should have.',
    )


class GoogleCloudRunV2RunJobRequest(BaseModel):
    etag: Optional[str] = Field(
        None,
        description='A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Indicates that the request should be validated without actually deleting any resources.',
    )


class GoogleCloudRunV2SecretKeySelector(BaseModel):
    secret: Optional[str] = Field(
        None,
        description='Required. The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.',
    )
    version: Optional[str] = Field(
        None,
        description="The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias.",
    )


class Ingress(Enum):
    INGRESS_TRAFFIC_UNSPECIFIED = 'INGRESS_TRAFFIC_UNSPECIFIED'
    INGRESS_TRAFFIC_ALL = 'INGRESS_TRAFFIC_ALL'
    INGRESS_TRAFFIC_INTERNAL_ONLY = 'INGRESS_TRAFFIC_INTERNAL_ONLY'
    INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER = 'INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER'


class GoogleCloudRunV2TCPSocketAction(BaseModel):
    port: Optional[int] = Field(
        None,
        description='Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.',
    )


class Type(Enum):
    TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED = (
        'TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED'
    )
    TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST = 'TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST'
    TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION = 'TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION'


class GoogleCloudRunV2TrafficTarget(BaseModel):
    percent: Optional[int] = Field(
        None,
        description='Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.',
    )
    revision: Optional[str] = Field(
        None,
        description='Revision to which to send this portion of traffic, if traffic allocation is by revision.',
    )
    tag: Optional[str] = Field(
        None,
        description='Indicates a string to be part of the URI to exclusively reference this target.',
    )
    type: Optional[Type] = Field(
        None, description='The allocation type for this traffic target.'
    )


class GoogleCloudRunV2TrafficTargetStatus(BaseModel):
    percent: Optional[int] = Field(
        None, description='Specifies percent of the traffic to this Revision.'
    )
    revision: Optional[str] = Field(
        None, description='Revision to which this traffic is sent.'
    )
    tag: Optional[str] = Field(
        None,
        description='Indicates the string used in the URI to exclusively reference this target.',
    )
    type: Optional[Type] = Field(
        None, description='The allocation type for this traffic target.'
    )
    uri: Optional[str] = Field(None, description='Displays the target URI.')


class GoogleCloudRunV2VersionToPath(BaseModel):
    mode: Optional[int] = Field(
        None,
        description="Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
    )
    path: Optional[str] = Field(
        None, description='Required. The relative path of the secret in the container.'
    )
    version: Optional[str] = Field(
        None,
        description="The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version.",
    )


class GoogleCloudRunV2VolumeMount(BaseModel):
    mountPath: Optional[str] = Field(
        None,
        description="Required. Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run",
    )
    name: Optional[str] = Field(
        None, description='Required. This must match the Name of a Volume.'
    )


class Egress(Enum):
    VPC_EGRESS_UNSPECIFIED = 'VPC_EGRESS_UNSPECIFIED'
    ALL_TRAFFIC = 'ALL_TRAFFIC'
    PRIVATE_RANGES_ONLY = 'PRIVATE_RANGES_ONLY'


class GoogleCloudRunV2VpcAccess(BaseModel):
    connector: Optional[str] = Field(
        None,
        description='VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.',
    )
    egress: Optional[Egress] = Field(None, description='Traffic VPC egress settings.')


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class GoogleLongrunningWaitOperationRequest(BaseModel):
    timeout: Optional[str] = Field(
        None,
        description='The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.',
    )


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudRunV2EnvVarSource(BaseModel):
    secretKeyRef: Optional[GoogleCloudRunV2SecretKeySelector] = Field(
        None,
        description='Selects a secret and a specific version from Cloud Secret Manager.',
    )


class GoogleCloudRunV2HTTPGetAction(BaseModel):
    httpHeaders: Optional[List[GoogleCloudRunV2HTTPHeader]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(
        None, description="Path to access on the HTTP server. Defaults to '/'."
    )
    port: Optional[int] = Field(
        None,
        description='Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.',
    )


class GoogleCloudRunV2Probe(BaseModel):
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GoogleCloudRunV2GRPCAction] = Field(
        None,
        description='GRPC specifies an action involving a gRPC port. Exactly one of httpGet, tcpSocket, or grpc must be specified.',
    )
    httpGet: Optional[GoogleCloudRunV2HTTPGetAction] = Field(
        None,
        description='HTTPGet specifies the http request to perform. Exactly one of httpGet, tcpSocket, or grpc must be specified.',
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.',
    )
    tcpSocket: Optional[GoogleCloudRunV2TCPSocketAction] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. Exactly one of httpGet, tcpSocket, or grpc must be specified.',
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds.',
    )


class GoogleCloudRunV2SecretVolumeSource(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.',
    )
    items: Optional[List[GoogleCloudRunV2VersionToPath]] = Field(
        None,
        description='If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.',
    )
    secret: Optional[str] = Field(
        None,
        description='Required. The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.',
    )


class GoogleCloudRunV2TaskAttemptResult(BaseModel):
    exitCode: Optional[int] = Field(
        None,
        description='Output only. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.',
    )
    status: Optional[GoogleRpcStatus] = Field(
        None,
        description='Output only. The status of this attempt. If the status code is OK, then the attempt succeeded.',
    )


class GoogleCloudRunV2Volume(BaseModel):
    cloudSqlInstance: Optional[GoogleCloudRunV2CloudSqlInstance] = Field(
        None,
        description='For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.',
    )
    name: Optional[str] = Field(None, description="Required. Volume's name.")
    secret: Optional[GoogleCloudRunV2SecretVolumeSource] = Field(
        None, description='Secret represents a secret that should populate this volume.'
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleCloudRunV2EnvVar(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Required. Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.',
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.',
    )
    valueSource: Optional[GoogleCloudRunV2EnvVarSource] = Field(
        None, description="Source for the environment variable's value."
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudRunV2Container(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description="Arguments to the entrypoint. The docker image's CMD is used if this is not provided.",
    )
    command: Optional[List[str]] = Field(
        None,
        description="Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.",
    )
    env: Optional[List[GoogleCloudRunV2EnvVar]] = Field(
        None, description='List of environment variables to set in the container.'
    )
    image: Optional[str] = Field(
        None,
        description='Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.',
    )
    livenessProbe: Optional[GoogleCloudRunV2Probe] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails.',
    )
    name: Optional[str] = Field(
        None, description='Name of the container specified as a DNS_LABEL (RFC 1123).'
    )
    ports: Optional[List[GoogleCloudRunV2ContainerPort]] = Field(
        None,
        description='List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.',
    )
    resources: Optional[GoogleCloudRunV2ResourceRequirements] = Field(
        None, description='Compute Resource requirements by this container.'
    )
    startupProbe: Optional[GoogleCloudRunV2Probe] = Field(
        None,
        description='Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails.',
    )
    volumeMounts: Optional[List[GoogleCloudRunV2VolumeMount]] = Field(
        None, description="Volume to mount into the container's filesystem."
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.",
    )


class GoogleCloudRunV2Revision(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None, description='KRM-style annotations for the resource.'
    )
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(
        None,
        description='Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state.',
    )
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(
        None,
        description='Holds the single container that defines the unit of execution for this Revision.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The creation time.'
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.',
    )
    encryptionKey: Optional[str] = Field(
        None,
        description='A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek',
    )
    encryptionKeyRevocationAction: Optional[EncryptionKeyRevocationAction] = Field(
        None, description='The action to take if the encryption key is revoked.'
    )
    encryptionKeyShutdownDuration: Optional[str] = Field(
        None,
        description='If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    executionEnvironment: Optional[ExecutionEnvironment] = Field(
        None, description='The execution environment being used to host this Revision.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.',
    )
    generation: Optional[str] = Field(
        None,
        description='Output only. A number that monotonically increases every time the user modifies the desired state.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="KRM-style labels for the resource. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels",
    )
    launchStage: Optional[LaunchStage] = Field(
        None,
        description='The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.',
    )
    logUri: Optional[str] = Field(
        None,
        description='Output only. The Google Console URI to obtain logs for the Revision.',
    )
    maxInstanceRequestConcurrency: Optional[int] = Field(
        None,
        description='Sets the maximum number of requests that each serving instance can receive.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique name of this Revision.'
    )
    observedGeneration: Optional[str] = Field(
        None,
        description='Output only. The generation of this Revision currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    reconciling: Optional[bool] = Field(
        None,
        description="Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Service.reconciling` for additional information on reconciliation process in Cloud Run.",
    )
    satisfiesPzs: Optional[bool] = Field(
        None, description='Output only. Reserved for future use.'
    )
    scaling: Optional[GoogleCloudRunV2RevisionScaling] = Field(
        None, description='Scaling settings for this revision.'
    )
    service: Optional[str] = Field(
        None, description='Output only. The name of the parent service.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has.',
    )
    timeout: Optional[str] = Field(
        None, description='Max allowed time for an instance to respond to a request.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(
        None, description='A list of Volumes to make available to containers.'
    )
    vpcAccess: Optional[GoogleCloudRunV2VpcAccess] = Field(
        None,
        description='VPC Access configuration for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.',
    )


class GoogleCloudRunV2RevisionTemplate(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='KRM-style annotations for the resource. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.',
    )
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(
        None,
        description='Holds the single container that defines the unit of execution for this Revision.',
    )
    encryptionKey: Optional[str] = Field(
        None,
        description='A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek',
    )
    executionEnvironment: Optional[ExecutionEnvironment] = Field(
        None, description='The sandbox environment to host this Revision.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='KRM-style labels for the resource. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 RevisionTemplate.',
    )
    maxInstanceRequestConcurrency: Optional[int] = Field(
        None,
        description='Sets the maximum number of requests that each serving instance can receive.',
    )
    revision: Optional[str] = Field(
        None,
        description='The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.',
    )
    scaling: Optional[GoogleCloudRunV2RevisionScaling] = Field(
        None, description='Scaling settings for this Revision.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description="Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.",
    )
    timeout: Optional[str] = Field(
        None, description='Max allowed time for an instance to respond to a request.'
    )
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(
        None, description='A list of Volumes to make available to containers.'
    )
    vpcAccess: Optional[GoogleCloudRunV2VpcAccess] = Field(
        None,
        description='VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.',
    )


class GoogleCloudRunV2Service(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description="Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources. All system annotations in v1 now have a corresponding field in v2 Service. This field follows Kubernetes annotations' namespacing, limits, and rules.",
    )
    binaryAuthorization: Optional[GoogleCloudRunV2BinaryAuthorization] = Field(
        None, description='Settings for the Binary Authorization feature.'
    )
    client: Optional[str] = Field(
        None, description='Arbitrary identifier for the API client.'
    )
    clientVersion: Optional[str] = Field(
        None, description='Arbitrary version identifier for the API client.'
    )
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(
        None,
        description='Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The creation time.'
    )
    creator: Optional[str] = Field(
        None, description='Output only. Email address of the authenticated creator.'
    )
    deleteTime: Optional[str] = Field(
        None, description='Output only. The deletion time.'
    )
    description: Optional[str] = Field(
        None,
        description='User-provided description of the Service. This field currently has a 512-character limit.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the time after which it will be permamently deleted.',
    )
    generation: Optional[str] = Field(
        None,
        description='Output only. A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.',
    )
    ingress: Optional[Ingress] = Field(
        None,
        description='Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Service.",
    )
    lastModifier: Optional[str] = Field(
        None,
        description='Output only. Email address of the last authenticated modifier.',
    )
    latestCreatedRevision: Optional[str] = Field(
        None,
        description='Output only. Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    latestReadyRevision: Optional[str] = Field(
        None,
        description='Output only. Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    launchStage: Optional[LaunchStage] = Field(
        None,
        description='The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.',
    )
    name: Optional[str] = Field(
        None,
        description='The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}',
    )
    observedGeneration: Optional[str] = Field(
        None,
        description='Output only. The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.',
    )
    reconciling: Optional[bool] = Field(
        None,
        description='Output only. Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.',
    )
    satisfiesPzs: Optional[bool] = Field(
        None, description='Output only. Reserved for future use.'
    )
    template: Optional[GoogleCloudRunV2RevisionTemplate] = Field(
        None,
        description='Required. The template used to create revisions for this Service.',
    )
    terminalCondition: Optional[GoogleCloudRunV2Condition] = Field(
        None,
        description='Output only. The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    traffic: Optional[List[GoogleCloudRunV2TrafficTarget]] = Field(
        None,
        description='Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.',
    )
    trafficStatuses: Optional[List[GoogleCloudRunV2TrafficTargetStatus]] = Field(
        None,
        description='Output only. Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )
    uri: Optional[str] = Field(
        None,
        description='Output only. The main URI in which this Service is serving traffic.',
    )


class GoogleCloudRunV2Task(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None, description='KRM-style annotations for the resource.'
    )
    completionTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the Task was completed. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(
        None,
        description='Output only. The Condition of this Task, containing its readiness status, and detailed error information in case it did not reach the desired state.',
    )
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(
        None,
        description='Holds the single container that defines the unit of execution for this task.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the task was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.',
    )
    encryptionKey: Optional[str] = Field(
        None,
        description='Output only. A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    execution: Optional[str] = Field(
        None, description='Output only. The name of the parent Execution.'
    )
    executionEnvironment: Optional[ExecutionEnvironment] = Field(
        None, description='The execution environment being used to host this Task.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.',
    )
    generation: Optional[str] = Field(
        None,
        description='Output only. A number that monotonically increases every time the user modifies the desired state.',
    )
    index: Optional[int] = Field(
        None,
        description='Output only. Index of the Task, unique per execution, and beginning at 0.',
    )
    job: Optional[str] = Field(
        None, description='Output only. The name of the parent Job.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="KRM-style labels for the resource. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels",
    )
    lastAttemptResult: Optional[GoogleCloudRunV2TaskAttemptResult] = Field(
        None, description='Output only. Result of the last attempt of this Task.'
    )
    logUri: Optional[str] = Field(
        None,
        description='Output only. URI where logs for this execution can be found in Cloud Console.',
    )
    maxRetries: Optional[int] = Field(
        None,
        description='Number of retries allowed per Task, before marking this Task failed.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique name of this Task.'
    )
    observedGeneration: Optional[str] = Field(
        None,
        description='Output only. The generation of this Task. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    reconciling: Optional[bool] = Field(
        None,
        description="Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.",
    )
    retried: Optional[int] = Field(
        None,
        description='Output only. The number of times this Task was retried. Tasks are retried when they fail up to the maxRetries limit.',
    )
    satisfiesPzs: Optional[bool] = Field(
        None, description='Output only. Reserved for future use.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description="Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.",
    )
    startTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    timeout: Optional[str] = Field(
        None,
        description='Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. Server assigned unique identifier for the Task. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(
        None, description='A list of Volumes to make available to containers.'
    )
    vpcAccess: Optional[GoogleCloudRunV2VpcAccess] = Field(
        None,
        description='Output only. VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.',
    )


class GoogleCloudRunV2TaskTemplate(BaseModel):
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(
        None,
        description='Holds the single container that defines the unit of execution for this task.',
    )
    encryptionKey: Optional[str] = Field(
        None,
        description='A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek',
    )
    executionEnvironment: Optional[ExecutionEnvironment] = Field(
        None, description='The execution environment being used to host this Task.'
    )
    maxRetries: Optional[int] = Field(
        None,
        description='Number of retries allowed per Task, before marking this Task failed. Defaults to 3.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description="Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.",
    )
    timeout: Optional[str] = Field(
        None,
        description='Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.',
    )
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(
        None, description='A list of Volumes to make available to containers.'
    )
    vpcAccess: Optional[GoogleCloudRunV2VpcAccess] = Field(
        None,
        description='VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.',
    )


class GoogleCloudRunV2Execution(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None, description='KRM-style annotations for the resource.'
    )
    cancelledCount: Optional[int] = Field(
        None,
        description='Output only. The number of tasks which reached phase Cancelled.',
    )
    completionTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(
        None,
        description='Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.',
    )
    failedCount: Optional[int] = Field(
        None, description='Output only. The number of tasks which reached phase Failed.'
    )
    generation: Optional[str] = Field(
        None,
        description='Output only. A number that monotonically increases every time the user modifies the desired state.',
    )
    job: Optional[str] = Field(
        None, description='Output only. The name of the parent Job.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="KRM-style labels for the resource. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels",
    )
    launchStage: Optional[LaunchStage] = Field(
        None,
        description='The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.',
    )
    logUri: Optional[str] = Field(
        None,
        description='Output only. URI where logs for this execution can be found in Cloud Console.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique name of this Execution.'
    )
    observedGeneration: Optional[str] = Field(
        None,
        description='Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    parallelism: Optional[int] = Field(
        None,
        description='Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.',
    )
    reconciling: Optional[bool] = Field(
        None,
        description="Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.",
    )
    retriedCount: Optional[int] = Field(
        None,
        description='Output only. The number of tasks which have retried at least once.',
    )
    runningCount: Optional[int] = Field(
        None, description='Output only. The number of actively running tasks.'
    )
    satisfiesPzs: Optional[bool] = Field(
        None, description='Output only. Reserved for future use.'
    )
    startTime: Optional[str] = Field(
        None,
        description='Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations.',
    )
    succeededCount: Optional[int] = Field(
        None,
        description='Output only. The number of tasks which reached phase Succeeded.',
    )
    taskCount: Optional[int] = Field(
        None,
        description='Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.',
    )
    template: Optional[GoogleCloudRunV2TaskTemplate] = Field(
        None,
        description='Output only. The template used to create tasks for this execution.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )


class GoogleCloudRunV2ExecutionTemplate(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='KRM-style annotations for the resource. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='KRM-style labels for the resource. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.',
    )
    parallelism: Optional[int] = Field(
        None,
        description='Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.',
    )
    taskCount: Optional[int] = Field(
        None,
        description='Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.',
    )
    template: Optional[GoogleCloudRunV2TaskTemplate] = Field(
        None,
        description='Required. Describes the task(s) that will be created when executing an execution.',
    )


class GoogleCloudRunV2Job(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description="KRM-style annotations for the resource. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected on new resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes annotations' namespacing, limits, and rules.",
    )
    binaryAuthorization: Optional[GoogleCloudRunV2BinaryAuthorization] = Field(
        None, description='Settings for the Binary Authorization feature.'
    )
    client: Optional[str] = Field(
        None, description='Arbitrary identifier for the API client.'
    )
    clientVersion: Optional[str] = Field(
        None, description='Arbitrary version identifier for the API client.'
    )
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(
        None,
        description='Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The creation time.'
    )
    creator: Optional[str] = Field(
        None, description='Output only. Email address of the authenticated creator.'
    )
    deleteTime: Optional[str] = Field(
        None, description='Output only. The deletion time.'
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    executionCount: Optional[int] = Field(
        None, description='Output only. Number of executions created for this job.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. For a deleted resource, the time after which it will be permamently deleted.',
    )
    generation: Optional[str] = Field(
        None,
        description='Output only. A number that monotonically increases every time the user modifies the desired state.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="KRM-style labels for the resource. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Job.",
    )
    lastModifier: Optional[str] = Field(
        None,
        description='Output only. Email address of the last authenticated modifier.',
    )
    latestCreatedExecution: Optional[GoogleCloudRunV2ExecutionReference] = Field(
        None, description='Output only. Name of the last created execution.'
    )
    launchStage: Optional[LaunchStage] = Field(
        None,
        description='The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.',
    )
    name: Optional[str] = Field(
        None,
        description='The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job}',
    )
    observedGeneration: Optional[str] = Field(
        None,
        description='Output only. The generation of this Job. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.',
    )
    reconciling: Optional[bool] = Field(
        None,
        description='Output only. Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, `observed_generation` and `latest_succeeded_execution`, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `observed_generation` and `generation`, `latest_succeeded_execution` and `latest_created_execution`. If reconciliation failed, `observed_generation` and `latest_succeeded_execution` will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in `terminal_condition` and `conditions`.',
    )
    satisfiesPzs: Optional[bool] = Field(
        None, description='Output only. Reserved for future use.'
    )
    template: Optional[GoogleCloudRunV2ExecutionTemplate] = Field(
        None,
        description='Required. The template used to create executions for this Job.',
    )
    terminalCondition: Optional[GoogleCloudRunV2Condition] = Field(
        None,
        description='Output only. The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )


class GoogleCloudRunV2ListExecutionsResponse(BaseModel):
    executions: Optional[List[GoogleCloudRunV2Execution]] = Field(
        None, description='The resulting list of Executions.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token indicating there are more items than page_size. Use it in the next ListExecutions request to continue.',
    )


class GoogleCloudRunV2ListJobsResponse(BaseModel):
    jobs: Optional[List[GoogleCloudRunV2Job]] = Field(
        None, description='The resulting list of Jobs.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token indicating there are more items than page_size. Use it in the next ListJobs request to continue.',
    )


class GoogleCloudRunV2ListRevisionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token indicating there are more items than page_size. Use it in the next ListRevisions request to continue.',
    )
    revisions: Optional[List[GoogleCloudRunV2Revision]] = Field(
        None, description='The resulting list of Revisions.'
    )


class GoogleCloudRunV2ListServicesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token indicating there are more items than page_size. Use it in the next ListServices request to continue.',
    )
    services: Optional[List[GoogleCloudRunV2Service]] = Field(
        None, description='The resulting list of Services.'
    )


class GoogleCloudRunV2ListTasksResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token indicating there are more items than page_size. Use it in the next ListTasks request to continue.',
    )
    tasks: Optional[List[GoogleCloudRunV2Task]] = Field(
        None, description='The resulting list of Tasks.'
    )
